// Code generated by pggen. DO NOT EDIT.

package services

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	// GetService gets service by name
	GetService(ctx context.Context, serviceName string) (GetServiceRow, error)

	// GetAllServices gets all services
	GetAllServices(ctx context.Context) ([]GetAllServicesRow, error)

	// GetServiceNames gets all service names
	GetServiceNames(ctx context.Context) ([]pgtype.Varchar, error)

	// DeleteService deletes a service
	DeleteService(ctx context.Context, id pgtype.UUID) (pgconn.CommandTag, error)

	// ReportService sets reported to true for a service
	ReportService(ctx context.Context, serviceName string) (pgconn.CommandTag, error)

	// ResetReportedService resets reported for a service
	ResetReportedService(ctx context.Context, serviceName string) (pgconn.CommandTag, error)

	// PatchServicePassword patches service password
	PatchServicePassword(ctx context.Context, password pgtype.Varchar, serviceName string) (pgconn.CommandTag, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver()}
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver() *typeResolver {
	ci := pgtype.NewConnInfo()
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const getServiceSQL = `SELECT * FROM services WHERE service_name = $1;`

type GetServiceRow struct {
	ID          pgtype.UUID    `json:"id"`
	ServiceName pgtype.Varchar `json:"service_name"`
	Password    pgtype.Varchar `json:"password"`
	ImagePath   pgtype.Varchar `json:"image_path"`
	ReportCount *int32         `json:"report_count"`
}

// GetService implements Querier.GetService.
func (q *DBQuerier) GetService(ctx context.Context, serviceName string) (GetServiceRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetService")
	row := q.conn.QueryRow(ctx, getServiceSQL, serviceName)
	var item GetServiceRow
	if err := row.Scan(&item.ID, &item.ServiceName, &item.Password, &item.ImagePath, &item.ReportCount); err != nil {
		return item, fmt.Errorf("query GetService: %w", err)
	}
	return item, nil
}

const getAllServicesSQL = `SELECT * FROM services;`

type GetAllServicesRow struct {
	ID          pgtype.UUID    `json:"id"`
	ServiceName pgtype.Varchar `json:"service_name"`
	Password    pgtype.Varchar `json:"password"`
	ImagePath   pgtype.Varchar `json:"image_path"`
	ReportCount *int32         `json:"report_count"`
}

// GetAllServices implements Querier.GetAllServices.
func (q *DBQuerier) GetAllServices(ctx context.Context) ([]GetAllServicesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetAllServices")
	rows, err := q.conn.Query(ctx, getAllServicesSQL)
	if err != nil {
		return nil, fmt.Errorf("query GetAllServices: %w", err)
	}
	defer rows.Close()
	items := []GetAllServicesRow{}
	for rows.Next() {
		var item GetAllServicesRow
		if err := rows.Scan(&item.ID, &item.ServiceName, &item.Password, &item.ImagePath, &item.ReportCount); err != nil {
			return nil, fmt.Errorf("scan GetAllServices row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetAllServices rows: %w", err)
	}
	return items, err
}

const getServiceNamesSQL = `SELECT service_name FROM services;`

// GetServiceNames implements Querier.GetServiceNames.
func (q *DBQuerier) GetServiceNames(ctx context.Context) ([]pgtype.Varchar, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetServiceNames")
	rows, err := q.conn.Query(ctx, getServiceNamesSQL)
	if err != nil {
		return nil, fmt.Errorf("query GetServiceNames: %w", err)
	}
	defer rows.Close()
	items := []pgtype.Varchar{}
	for rows.Next() {
		var item pgtype.Varchar
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan GetServiceNames row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetServiceNames rows: %w", err)
	}
	return items, err
}

const deleteServiceSQL = `DELETE FROM services WHERE id=$1;`

// DeleteService implements Querier.DeleteService.
func (q *DBQuerier) DeleteService(ctx context.Context, id pgtype.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteService")
	cmdTag, err := q.conn.Exec(ctx, deleteServiceSQL, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteService: %w", err)
	}
	return cmdTag, err
}

const reportServiceSQL = `UPDATE services SET report_count = report_count + 1 WHERE service_name = $1;`

// ReportService implements Querier.ReportService.
func (q *DBQuerier) ReportService(ctx context.Context, serviceName string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ReportService")
	cmdTag, err := q.conn.Exec(ctx, reportServiceSQL, serviceName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query ReportService: %w", err)
	}
	return cmdTag, err
}

const resetReportedServiceSQL = `UPDATE services SET report_count = 0 WHERE service_name = $1;`

// ResetReportedService implements Querier.ResetReportedService.
func (q *DBQuerier) ResetReportedService(ctx context.Context, serviceName string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ResetReportedService")
	cmdTag, err := q.conn.Exec(ctx, resetReportedServiceSQL, serviceName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query ResetReportedService: %w", err)
	}
	return cmdTag, err
}

const patchServicePasswordSQL = `UPDATE services SET password = $1 WHERE service_name = $2;`

// PatchServicePassword implements Querier.PatchServicePassword.
func (q *DBQuerier) PatchServicePassword(ctx context.Context, password pgtype.Varchar, serviceName string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "PatchServicePassword")
	cmdTag, err := q.conn.Exec(ctx, patchServicePasswordSQL, password, serviceName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query PatchServicePassword: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs for unregistered types.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
